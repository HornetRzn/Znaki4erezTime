import os
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
)
from PIL import Image
import sqlite3
import uuid
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('dating.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        age INTEGER,
        orientation TEXT,
        role TEXT,
        location TEXT,
        bio TEXT,
        photos TEXT,
        video TEXT,
        state TEXT,
        current_match INTEGER,
        message_count INTEGER
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS matches (
        match_id INTEGER PRIMARY KEY,
        user1 INTEGER,
        user2 INTEGER,
        user1_liked BOOLEAN,
        user2_liked BOOLEAN,
        chat_active BOOLEAN,
        messages_exchanged INTEGER
    )
''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    NAME,
    AGE,
    ORIENTATION,
    ROLE,
    LOCATION,
    BIO,
    PHOTOS,
    VIDEO,
    MAIN_MENU,
    VIEW_PROFILES,
    CHATTING,
) = range(11)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
    if cursor.fetchone() is None:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        return NAME
    else:
        await show_main_menu(update, context)
        return MAIN_MENU

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def process_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['age'] = update.message.text
    reply_keyboard = [["–ì–µ–π", "–ë–∏", "–¢—Ä–∞–Ω—Å", "–ì–µ—Ç–µ—Ä–æ", "–î—Ä—É–≥–æ–µ"]]
    await update.message.reply_text(
        "–¢–≤–æ—è —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return ORIENTATION

async def process_orientation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['orientation'] = update.message.text
    await update.message.reply_text("–¢–≤–æ—è —Ä–æ–ª—å –≤ —Å–µ–∫—Å–µ:")
    return ROLE

async def process_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['role'] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –†—è–∑–∞–Ω–∏ (–æ–±–ª–∞—Å—Ç–∏) —Ç—ã –∂–∏–≤—ë—à—å?")
    return LOCATION

async def process_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['location'] = update.message.text
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?")
    return BIO

async def process_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['bio'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏ –æ—Ç 1 –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –≤–∏–¥–µ–æ (15 —Å–µ–∫)")
    return PHOTOS

async def process_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []
    
    if update.message.photo:
        photo = update.message.photo[-1].file_id
        context.user_data['photos'].append(photo)
    elif update.message.video:
        video = update.message.video.file_id
        context.user_data['video'] = video
    
    if len(context.user_data['photos']) >= 3:
        await finish_profile(update, context)
        return MAIN_MENU
    else:
        await update.message.reply_text("–§–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done")
        return PHOTOS

async def finish_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    photos = ','.join(user_data['photos']) if 'photos' in user_data else ''
    
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, name, age, orientation, role, location, bio, photos, video, state)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        update.message.from_user.id,
        user_data['name'],
        user_data['age'],
        user_data['orientation'],
        user_data['role'],
        user_data['location'],
        user_data['bio'],
        photos,
        user_data.get('video', ''),
        'active'
    ))
    conn.commit()
    
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data='view_profiles')],
        [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    return MAIN_MENU

async def view_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    cursor.execute('''
        SELECT * FROM users 
        WHERE user_id != ? 
        AND orientation IN (SELECT orientation FROM users WHERE user_id = ?)
        ORDER BY RANDOM() LIMIT 1
    ''', (query.from_user.id, query.from_user.id))
    
    profile = cursor.fetchone()
    if not profile:
        await query.message.reply_text("–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ Like/Dislike
    context.user_data['current_profile'] = profile[0]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
    photos = profile[7].split(',') if profile[7] else []
    media = []
    for photo in photos[:3]:
        media.append(InputMediaPhoto(photo))
    
    if profile[8]:  # –í–∏–¥–µ–æ
        media.append(InputMediaVideo(profile[8]))
    
    await query.message.reply_media_group(media=media)
    
    text = f"""
    –ò–º—è: {profile[1]}
    –í–æ–∑—Ä–∞—Å—Ç: {profile[2]}
    –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {profile[3]}
    –†–æ–ª—å: {profile[4]}
    –†–∞–π–æ–Ω: {profile[5]}
    –û —Å–µ–±–µ: {profile[6]}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è", callback_data='like'),
         InlineKeyboardButton("üëé", callback_data='dislike')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)
    return VIEW_PROFILES

async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    liked_user = context.user_data['current_profile']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
    cursor.execute('''
        SELECT * FROM matches 
        WHERE (user1 = ? AND user2 = ?) OR (user1 = ? AND user2 = ?)
    ''', (user_id, liked_user, liked_user, user_id))
    
    match = cursor.fetchone()
    if match:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞
        cursor.execute('''
            UPDATE matches SET 
            user1_liked = CASE WHEN user1 = ? THEN TRUE ELSE user1_liked END,
            user2_liked = CASE WHEN user2 = ? THEN TRUE ELSE user2_liked END,
            chat_active = TRUE
            WHERE match_id = ?
        ''', (user_id, user_id, match[0]))
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
        cursor.execute('''
            INSERT INTO matches 
            (user1, user2, user1_liked, user2_liked, chat_active, messages_exchanged)
            VALUES (?, ?, TRUE, FALSE, FALSE, 0)
        ''', (user_id, liked_user))
    
    conn.commit()
    
    if match and (match[3] and match[4]):
        # –ï—Å–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        await start_chat(user_id, liked_user, context)
    
    await query.message.reply_text("–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    return await view_profiles(update, context)

async def start_chat(user1, user2, context):
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await context.bot.send_message(user1, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–ª–æ—Å—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π)")
    await context.bot.send_message(user2, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–ª–æ—Å—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π)")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('UPDATE users SET current_match = ?, message_count = 0 WHERE user_id IN (?, ?)', 
                  (user2, user1, user2))
    conn.commit()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    cursor.execute('SELECT current_match, message_count FROM users WHERE user_id = ?', (user.id,))
    data = cursor.fetchone()
    
    if data and data[0]:
        match_user = data[0]
        count = data[1]
        
        if count >= 5:
            await update.message.reply_text("–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω!")
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(
            match_user, 
            f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({5 - count} –æ—Å—Ç–∞–ª–æ—Å—å):\n{update.message.text}"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        cursor.execute('UPDATE users SET message_count = message_count + 1 WHERE user_id = ?', (user.id,))
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–∞ —Å—á–µ—Ç—á–∏–∫–∞
        cursor.execute('SELECT message_count FROM users WHERE user_id = ?', (match_user,))
        other_count = cursor.fetchone()[0]
        
        if count + 1 >=5 and other_count >=5:
            await offer_contact_exchange(user.id, match_user, context)

async def offer_contact_exchange(user1, user2, context):
    keyboard = [[InlineKeyboardButton("–î–ê", callback_data='share_contact')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        user1, 
        "–ö–∞–∂–µ—Ç—Å—è –≤—ã —Å–æ–∑—Ä–µ–ª–∏ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏", 
        reply_markup=reply_markup
    )
    await context.bot.send_message(
        user2, 
        "–ö–∞–∂–µ—Ç—Å—è –≤—ã —Å–æ–∑—Ä–µ–ª–∏ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏", 
        reply_markup=reply_markup
    )

async def handle_contact_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'share_contact':
        user = query.from_user
        cursor.execute('SELECT current_match FROM users WHERE user_id = ?', (user.id,))
        match_user = cursor.fetchone()[0]
        
        # –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await context.bot.send_message(
            match_user, 
            f"–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: @{user.username}"
        )
    else:
        await query.message.reply_text("–•–æ—Ä–æ—à–æ, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–µ")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cursor.execute('UPDATE users SET current_match = NULL, message_count = 0 WHERE user_id = ?', (user.id,))
    conn.commit()

def main() -> None:
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_age)],
            ORIENTATION: [MessageHandler(filters.Regex("^(–ì–µ–π|–ë–∏|–¢—Ä–∞–Ω—Å|–ì–µ—Ç–µ—Ä–æ|–î—Ä—É–≥–æ–µ)$"), process_orientation)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_role)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_location)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bio)],
            PHOTOS: [
                MessageHandler(filters.PHOTO | filters.VIDEO, process_photos),
                CommandHandler("done", finish_profile)
            ],
            MAIN_MENU: [
                CallbackQueryHandler(view_profiles, pattern='^view_profiles$'),
            ],
            VIEW_PROFILES: [
                CallbackQueryHandler(handle_like, pattern='^like$'),
                CallbackQueryHandler(view_profiles, pattern='^dislike$'),
            ],
            CHATTING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
            ]
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_contact_decision, pattern='^share_contact$'))
    
    application.run_polling()

if __name__ == "__main__":
    main()
